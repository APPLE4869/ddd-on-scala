:toc:

= DDD on Scala

https://www.scala-lang.org[Scala] による https://www.amazon.co.jp/dp/4798121967[DDD（ドメイン駆動設計）] の実装サンプルです。

[NOTE]
====
実装上のポイントを、コード中に `NOTE:` でコメントしています。 +
`NOTE:` でテキスト検索するなどして参照してください。
====

== セットアップ

=== 前提

* JDK 1.8 以上
* http://www.scala-sbt.org/index.html[sbt]

=== DBの準備

このサンプルでは、一部で http://www.h2database.com/html/main.html[組み込みのH2データベース] を使用したコード例があります。

サンプルの実行前にDBを作成します。

* **sbt** でDBにテーブルを作成します。
====
> $ sbt "project rdb" flywayMigrate
====

== ビルドと実行

このサンプルはアプリケーションとしてのエンドポイントはありません。 +
動作は **sbt** からユニットテストを実行して確認してください。

====
> $ sbt test
====

== 構成

=== レイヤ・モジュール構成

このサンプルでは、 http://jeffreypalermo.com/blog/the-onion-architecture-part-1/[オニオンアーキテクチャ] をもとにした
レイヤ・モジュール構成を採用しています。

image:doc/Layer.png[]

[format="csv",options=["header"]]
|===
レイヤ,責務,依存するレイヤ
ドメイン,ドメイン（業務）の関心事と仕様をモデル化します。,なし
アプリケーション,ドメイン・クエリを使用して、ユースケースを実現します。,ドメイン
クエリ,`CQRS` のクエリモデルです。ドメインの読み取り専用ビューを提供します。,なし
インフラストラクチャ,アプリケーションの実行結果を永続化します。,アプリケーション / ドメイン / クエリ
インターフェース,利用者へのユーザーインターフェースを提供します。,インフラストラクチャ / アプリケーション / ドメイン / クエリ
|===

* `ドメインレイヤ` と `アプリケーションレイヤ` は特定のインフラストラクチャに依存しないので、
インフラストラクチャの変更が容易になります。 +
また、ユニットテストを簡単かつ軽量に実施することができます。

* `インフラストラクチャレイヤ` は、採用するミドルウェア・サービスごとにモジュールを分割します。 +
こうすることで、`インターフェースレイヤ` でインフラストラクチャモジュールを実行に必要なものだけに限定することができ、
使用しないライブラリ（JDBCドライバやクライアントライブラリなど）のために実行モジュールが肥大化することを回避できます +
特に `AWS Lambda` などのサーバレスプラットフォームでは、実行モジュールが大きくなると実行時のスピンアップ時間が長くなるため、
実行モジュールを小さくすることに価値があります。

* `インターフェースレイヤ` は、提供するインターフェース（Web画面、REST API、CLIなど）ごとにモジュールを分割します。  +

=== コンポーネント構成

このサンプルのコンポーネント構成は下図の通りです。

image:doc/Components.png[]

=== 概念モデル

このサンプルで扱う対象のドメインは下図の通りです。

image:doc/DomainModel.png[]

== 参考文献

=== Scala

* https://dwango.github.io/scala_text/[ドワンゴさんのScala研修用テキスト] +
Scalaの入門テキスト。
* http://www.ne.jp/asahi/hishidama/home/tech/scala/index.html[HishidamaさんのScalaリファレンス] +
Scalaのよく使う言語機能やAPIのリファレンス。

* http://www.scalatest.org/user_guide[ScalaTest] +
Scalaの代表的なテスティングライブラリ。
* http://scalikejdbc.org[ScalikeJDBC] +
ScalaでRDBにアクセスするライブラリ。

* https://tpolecat.github.io/2015/04/29/f-bounds.html[Returning the "Current" Type in Scala] +
スーパータイプのメソッドの戻り値の型として、サブタイプを使用する方法の解説。

=== DDD（ドメイン駆動設計）

* https://www.amazon.co.jp/dp/4798121967[書籍：エリック・エヴァンスのドメイン駆動設計]
* https://www.amazon.co.jp/dp/479813161X[書籍：実践ドメイン駆動設計]

* http://labs.gree.jp/blog/2013/12/9354/[Scalaコードでわかった気になるDDD] +
Scalaを使ったDDDの解説。

=== アーキテクチャ

* http://jeffreypalermo.com/blog/the-onion-architecture-part-1/[The Onion Architecture : part 1]
* http://qiita.com/gki/items/91386b082c57123f1ba0[Clean Architectureで分からなかったところを整理する]

=== その他

* http://powerman.name/doc/asciidoc[AsciiDoc cheatsheet] +
AsciiDoc（このREADMEでも使用しているマークダウン言語）の書き方。一般的な Markdown よりも表現力が強力。
