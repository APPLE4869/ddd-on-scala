:toc:

= Sandbox

Now printing...

* TODO 概要
* TODO プロジェクトの構成
* TODO 概念モデル

== セットアップ

=== 前提

* JDK 1.8 以上
* http://www.scala-sbt.org/index.html[sbt]
* https://www.docker.com[Docker]


=== DBの準備

* **Docker Compose** でDBサーバ（ https://mariadb.org[MariaDB] ）を起動します。
====
> $ cd ddd-on-scala +
> $ docker-compose up -d
====

* **sbt** でDBにテーブルを作成します。
====
> $ sbt "project infrastructure" flywayMigrate
====

== ビルドと実行

このサンプルはアプリケーションとしてのエンドポイントはありません。 +
実行は **sbt** からユニットテストを実行して確認してください。

====
> $ sbt test
====

== 構成

=== レイヤとモジュール

レイヤ構成は **ヘキサゴナルアーキテクチャ** （および **オニオンアーキテクチャ** 、 **クリーンアーキテクチャ** ）を採用しています。

各レイヤと対応するモジュールの構成は下表の通りです。

[format="csv",options="header"]
|====
レイヤ,責務,依存するレイヤ,モジュール,ディレクトリ
ドメイン,プロダクトが扱う業務領域（ドメイン）の知識を実装します。,-,domain,modules/domain
アプリケーション,ドメインを使って、ユースケースを実現します。,ドメイン,application,modules/application
インフラ,アプリケーションの実行結果を永続化します。,アプリケーション、ドメイン,infrastructure,modules/adapter/infrastructure
コントローラ,外部（人やシステム）とのインターフェースを提供します。,インフラ、アプリケーション、ドメイン,sample,modules/adapter/controller/sample
|====

== 参考文献

=== Scala

* https://dwango.github.io/scala_text/[ドワンゴさんのScala研修用テキスト] +
Scalaの入門テキスト。
* http://www.ne.jp/asahi/hishidama/home/tech/scala/index.html[HishidamaさんのScalaリファレンス] +
Scalaのよく使う言語機能やAPIのリファレンス。

* http://www.scalatest.org/user_guide[ScalaTest] +
Scalaの代表的なテスティングライブラリ。
* http://scalikejdbc.org[ScalikeJDBC] +
ScalaでRDBにアクセスするライブラリ。

* https://tpolecat.github.io/2015/04/29/f-bounds.html[Returning the "Current" Type in Scala] +
スーパータイプのメソッドの戻り値の型として、サブタイプを使用する方法の解説。

=== DDD（ドメイン駆動設計）

* https://www.amazon.co.jp/dp/4798121967[書籍：エリック・エヴァンスのドメイン駆動設計]
* https://www.amazon.co.jp/dp/479813161X[書籍：実践ドメイン駆動設計]

* http://labs.gree.jp/blog/2013/12/9354/[Scalaコードでわかった気になるDDD] +
Scalaを使ったDDDの解説。

=== その他

* http://powerman.name/doc/asciidoc[AsciiDoc cheatsheet] +
AsciiDoc（このREADMEでも使用しているマークダウン言語）の書き方。一般的な Markdown よりも表現力が強力。
